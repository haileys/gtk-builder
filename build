#!/usr/bin/env bash
set -euo pipefail

cd "$(dirname "$0")"
source lib/init.sh

build-project() {
    local project="$1"
    local project_dir="$BUILD_DIR/$project"

    mkdir -p "$project_dir"

    log "Building $project"
    (
        local submodules="$(pwd)/submodules"

        source lib/build/init.sh
        source "projects/${project}.sh"

        cd "$project_dir"
        mkdir -p build

        log "Preparing $project $version"
        project-step prepare "$project"

        log "Configuring $project $version"
        project-step configure "$project"

        log "Building $project $version"
        project-step build "$project"

        log "Installing $project $version"
        project-step install "$project"
    )
}

check-function() {
    [[ "$(type -t "$1")" == "function" ]]
}

invoke-project-step() {
    check-function "$1" || die "$1 is not a function"
    # steps run in subshells
    ( "$1" )
}

invoke-project-hook() {
    check-function "$1" || return 0
    # hooks do not run in subshells
    "$1"
}

project-step() {
    local step="$1"
    local project="$2"

    invoke-project-hook "recipe-${step}#${project}"

    invoke-project-step "$step"

    invoke-project-hook "recipe-post-${step}#${project}"
}

# ensure dirs exist before loading recipes, which might write to them
mkdir -p "$BUILD_DIR"
mkdir -p "$TARGET_DIR"
mkdir -p "$TARGET_DIR/lib"

# load the recipe
load-recipe

if [ "$#" == 0 ]; then
    echo "specify project to build or 'all'" >&2
    exit 1
fi

if [[ "$1" == "all" ]]; then
    [[ "$(type -t recipe-default-build)" == "function" ]] ||
        die "recipe-default-build not defined, cannot build all. Did you load a recipe?"

    recipe-default-build
else
    build-project "$1"
fi
