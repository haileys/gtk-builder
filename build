#!/usr/bin/env bash
set -euo pipefail

cd "$(dirname "$0")"
source lib/init.sh

build-project() {
    project::with-env "$1" -- project-steps
}

project-steps() {
    log "Preparing $project $version"
    project-step prepare

    log "Configuring $project $version"
    project-step configure

    log "Building $project $version"
    project-step build

    log "Installing $project $version"
    project-step install
}

check-function() {
    [[ "$(type -t "$1")" == "function" ]]
}

invoke-project-step() {
    check-function "$1" || die "$1 is not a function"
    # steps run in subshells
    ( "$1" )
}

invoke-project-hook() {
    check-function "$1" || return 0
    # hooks do not run in subshells
    "$1"
}

project-step() {
    local step="$1"

    invoke-project-hook "recipe::${step}#${project}"

    invoke-project-step "$step"

    invoke-project-hook "recipe::post-${step}#${project}"
}

main() {
    if [ "$#" == 0 ]; then
        echo "specify project to build or 'all'" >&2
        exit 1
    fi

    # log "Dependencies for project $1"
    # project::depends "$1"
    # exit

    if [[ "$1" == "all" ]]; then
        [[ "$(type -t recipe::build-default)" == "function" ]] ||
            die "recipe::build-default not defined, cannot build all. Did you load a recipe?"

        recipe::build-default
    else
        build-project "$1"
    fi
}

load-recipe
main "$@"
