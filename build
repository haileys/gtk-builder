#!/bin/bash
set -euo pipefail

cd "$(dirname "$0")"
source lib/init.sh

build-project() {
    local project="$1"
    local project_dir="$BUILD_DIR/$project"

    mkdir -p "$project_dir"

    log "Building $project"
    (
        local submodules="$(pwd)/submodules"

        source lib/project/init.sh
        source "projects/${project}.sh"

        cd "$project_dir"
        mkdir -p build

        log "Preparing $project $version"
        invoke-project-function prepare

        log "Configuring $project $version"
        invoke-project-function configure

        log "Building $project $version"
        invoke-project-function build

        log "Installing $project $version"
        invoke-project-function install
    )
}

invoke-project-function() {
    local func="$1"
    [[ "$(type -t "$func")" == "function" ]] || die "$func is not a function"
    ( "$func" )
}

mkdir -p "$TARGET_DIR"

if [ "$#" == 0 ]; then
    echo "specify project to build" >&2
    exit 1
fi

if [[ "$1" == "all" ]]; then
    # build projects in dependency order
    build-project gettext
    build-project zlib
    build-project pcre2
    build-project libffi
    build-project util-linux
    build-project glib
    build-project libpng
    build-project libjpeg-turbo
    build-project libtiff
    build-project libxml2
    build-project shared-mime-info
    build-project gdk-pixbuf
    build-project freetype
    build-project expat
    build-project fontconfig
    build-project pixman
    build-project cairo
    build-project harfbuzz
    build-project fribidi
    build-project pango
    build-project graphene
    build-project libepoxy
    build-project wayland
    build-project wayland-protocols
    build-project xkbcommon
    build-project gtk
else
    build-project "$1"
fi

# build-project glib
# build-project gobject-introspection
# build-project libpng
# build-project glib
