#!/usr/bin/env bash
set -euo pipefail

cd "$(dirname "$0")"
source lib/init.sh

build-project() {
    task::spawn "$1" -- \
        project::with-env "$1" -- \
        project::lock-build project-steps
}

project-steps() {
    (
        task::status "Waiting"
        project::wait-depends

        task::started

        log "Preparing $project $version"
        project-step prepare

        log "Configuring $project $version"
        project-step configure

        log "Building $project $version"
        project-step build

        log "Installing $project $version"
        project-step install

        task::finished "Finished $project $version"
    ) > "$project_dir/build.log" &

    # workaround for || affecting the behaviour of set -e inside a subshell
    wait $! || {
        task::error "Build failed"
        false
    }
}

check-function() {
    [[ "$(type -t "$1")" == "function" ]]
}

invoke-project-step() {
    check-function "$1" || die "$1 is not a function"
    # steps run in subshells
    ( "$1" ) 2>&1
}

invoke-project-hook() {
    check-function "$1" || return 0
    # hooks do not run in subshells
    "$1"
}

project-step() {
    local step="$1"

    invoke-project-hook "recipe::pre-${step}#${project}"

    if check-function "recipe::${step}#${project}"; then
        invoke-project-step "recipe::${step}#${project}"
    else
        invoke-project-step "$step"
    fi

    invoke-project-hook "recipe::post-${step}#${project}"
}

main() {
    if [ "$#" == 0 ]; then
        echo "specify project to build or 'all'" >&2
        exit 1
    fi

    parallel::init

    if [[ "$1" == "all" ]]; then
        [[ "$(type -t recipe::build-default)" == "function" ]] ||
            die "recipe::build-default not defined, cannot build all. Did you load a recipe?"

        recipe::build-default
    else
        for project in $(project::depends "$@"); do
            build-project "$project"
            sleep 0.1
        done
    fi

    parallel::await
}

load-recipe
main "$@"
